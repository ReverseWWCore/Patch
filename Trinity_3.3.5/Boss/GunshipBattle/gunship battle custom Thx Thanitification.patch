From d47fca5805837a7ffa7756826f67ed86a96750bd Mon Sep 17 00:00:00 2001
From: adrian <box758sk@hotmail.com>
Date: Sat, 12 Jan 2013 02:49:26 +0100
Subject: [PATCH] Implementada gunship battle custom Thx Thanitification

---
 sql/core/raids/Gunship_Battle_custom.sql           |   60 ++
 .../Northrend/IcecrownCitadel/icecrown_citadel.cpp |  678 +++++++++++++++++++-
 .../Northrend/IcecrownCitadel/icecrown_citadel.h   |   19 +
 .../IcecrownCitadel/instance_icecrown_citadel.cpp  |   18 +
 4 files changed, 774 insertions(+), 1 deletion(-)
 create mode 100644 sql/core/raids/Gunship_Battle_custom.sql

diff --git a/sql/core/raids/Gunship_Battle_custom.sql b/sql/core/raids/Gunship_Battle_custom.sql
new file mode 100644
index 0000000..12c29ea
--- /dev/null
+++ b/sql/core/raids/Gunship_Battle_custom.sql
@@ -0,0 +1,60 @@
+-- Move NPCs to proper locations
+UPDATE `creature` SET  `position_x` =  '-558.109253', `position_y` =  '2205.420654', `position_z` = 199.969559, `orientation` = 3.004918 WHERE  `guid` = 200988;  -- VINDICATOR
+UPDATE `creature` SET  `position_x` =  '-531.942566', `position_y` =  '2124.377930', `position_z` = 199.969681, `orientation` = 2.438634 WHERE  `guid` = 201041; -- Horde DEFENDER
+UPDATE `creature` SET  `position_x` =  '-540.092224', `position_y` =  '2129.904785', `position_z` = 199.970352, `orientation` = 2.438634 WHERE  `guid` = 201076; -- Ally NPC, 
+UPDATE `creature` SET  `position_x` =  '-562.132874', `position_y` =  '2195.537354', `position_z` = 199.969757, `orientation` = 1.466264 WHERE  `guid` = 201020; -- Ally sorcerer
+DELETE FROM `creature` WHERE `guid` = 200896;
+DELETE FROM `creature` WHERE `guid` = 200917;
+DELETE FROM `creature` WHERE `guid` = 201176;
+
+-- Texts
+SET @PRIMALIST := 37030;
+SET @INVOKER := 37033;
+SET @DEFENDER := 37032;
+SET @VINDICATOR := 37003;
+SET @SORCERER := 37026;
+SET @PROTECTOR := 36998;
+SET @FROSTWYRM := 37230;
+SET @SOUNDID :=0;
+DELETE FROM `creature_text` WHERE `entry` IN (37030,37033,37032,37003,37026,36998,37230);
+INSERT INTO `creature_text` (`entry`,`groupid`,`id`,`text`,`type`,`language`,`probability`,`emote`,`duration`,`sound`,`comment`) VALUES
+(@PRIMALIST,0, 0, 'Thank the spirits for you, brothers and sisters. The Skybreaker has already left. Quickly now, to Orgrim''s Hammer! If you leave soon, you may be able to catch them.', 12, 0, 100, 0, 0, 17161, 'Kor''kron Primalist - SAY_FIRST_SQUAD_RESCUED_HORDE_0'),
+(@INVOKER,  0, 0, 'This should be helpin''ya!', 12, 0, 100, 0, 0, @SOUNDID, 'Kor''kron Invoker - SAY_FIRST_SQUAD_RESCUED_HORDE_1'),
+(@INVOKER,  1, 0, '%s summons a Kor''kron Battle Standard.', 16, 0, 100, 0, 0, @SOUNDID, 'Kor''kron Invoker - SAY_SUMMON_BATTLE_STANDARD'),
+(@DEFENDER, 0, 0, 'Aka''Magosh, brave warriors. The alliance is in great number here.', 12, 0, 100, 0, 0, 17163, 'Kor''kron Defender - SAY_SECOND_SQUAD_RESCUED_HORDE_0'),
+(@DEFENDER, 1, 0, 'Captain Saurfang will be pleased to see you aboard Orgrim''s Hammer. Make haste, we will secure the area until you are ready for take-off.', 12, 0, 100, 0, 0, @SOUNDID, 'Kor''kron Defender - SAY_SECOND_SQUAD_RESCUED_HORDE_1'),
+(@DEFENDER, 2, 0, 'A screeching cry pierces the air above!',41, 0, 100, 0, 0, @SOUNDID, 'Frostwyrm - SAY_FROSTWYRM_SUMMON_0'),
+(@VINDICATOR, 0, 0, 'Thank goodness you arrived when you did, heroes. Orgrim''s Hammer has already left. Quickly now, to The Skybreaker! If you leave soon, you may be able to catch them.', 12, 0, 100, 0, 0, 17154, 'Skybreaker Vindicator - SAY_FIRST_SQUAD_RESCUED_ALLIANCE_0'),
+(@SORCERER, 0, 0, 'This ought to help!', 12, 0, 100, 0, 0, 17155, 'Skybreaker Sorcerer - SAY_FIRST_SQUAD_RESCUED_ALLIANCE_1'),
+(@SORCERER, 1, 0, '%s summons a Skybreaker Battle Standard.', 16, 0, 100, 0, 0, @SOUNDID, 'Skybreaker Sorcerer - SAY_SUMMON_BATTLE_STANDARD'),
+(@PROTECTOR,0, 0, 'You have my thanks. We were outnumbered until you arrived.', 12, 0, 100, 0, 0, 17157, 'Skybreaker Protector - SAY_SECOND_SQUAD_RESCUED_ALLIANCE_0'),
+(@PROTECTOR,1, 0, 'Captain Muradin is waiting aboard The Skybreaker. We''ll secure the area until you are ready for take off.', 12, 0, 100, 0, 0, @SOUNDID, 'Skybreaker Protector - SAY_SECOND_SQUAD_RESCUED_ALLIANCE_1'),
+(@PROTECTOR,2, 0, 'Skybreaker infantry, hold position!', 12, 0, 100, 0, 0, @SOUNDID, 'Skybreaker Protector - SAY_SECOND_SQUAD_RESCUED_ALLIANCE_2'),
+(@PROTECTOR,3, 0, 'A screeching cry pierces the air above!',41, 0, 100, 0, 0, @SOUNDID, 'Frostwyrm - SAY_FROSTWYRM_SUMMON_0'),
+(@FROSTWYRM,0, 0, 'A Spire Frostwyrm lands just before Orgrim''s Hammer.', 16, 0, 100, 0, 0, @SOUNDID, 'Frostwyrm - SAY_FROSTWYRM_LAND_H_1'),
+(@FROSTWYRM,1, 0, 'A Spire Frostwyrm lands just before The Skybreaker. ', 16, 0, 100, 0, 0, @SOUNDID, 'Frostwyrm - SAY_FROSTWYRM_LAND_A_2');
+
+
+UPDATE `creature_template` SET `ScriptName` = 'npc_korkron_defender' WHERE `entry` = 37032;
+UPDATE `creature_template` SET `ScriptName` = 'npc_korkron_primalist' WHERE `entry` = 37030;
+UPDATE `creature_template` SET `ScriptName` = 'npc_skybreaker_vindicator' WHERE `entry` = 37003;
+UPDATE `creature_template` SET `ScriptName` = 'npc_skybreaker_protector' WHERE `entry` = 36998;
+UPDATE `creature_template` SET `ScriptName` = 'npc_icc_spire_frostwyrm' WHERE `entry` = 37230;
+
+-- Battle Standards Spells
+UPDATE `creature_template` SET `unit_flags` = 33554564, `flags_extra` = 2 WHERE `entry` IN (37044, 37041);
+UPDATE `creature_template` SET `faction_A` = 1801, `faction_H` = 1801 WHERE `entry` = 37044;
+UPDATE `creature_template` SET `faction_A` = 1802, `faction_H` = 1802 WHERE `entry` = 37041;
+DELETE FROM `creature_template_addon` WHERE `entry` IN (37044, 37041);
+SET @KORKRON := 37044; -- Kor'kron Battle Standard
+SET @SKYBREAKER := 37041; -- Skybreaker Battle Standard
+SET @HSPELL := 69809;
+SET @ASPELL := 69808;
+UPDATE `creature_template` SET `AIName`='SmartAI' WHERE `entry` IN (@KORKRON, @SKYBREAKER);
+DELETE FROM `smart_scripts` WHERE `source_type`=0 AND `entryorguid` IN (@KORKRON, @SKYBREAKER);
+INSERT INTO `smart_scripts` (`entryorguid`,`source_type`,`id`,`link`,`event_type`,`event_phase_mask`,`event_chance`,`event_flags`,`event_param1`,`event_param2`,`event_param3`,`event_param4`,`action_type`,`action_param1`,`action_param2`,`action_param3`,`action_param4`,`action_param5`,`action_param6`,`target_type`,`target_param1`,`target_param2`,`target_param3`,`target_x`,`target_y`,`target_z`,`target_o`,`comment`) VALUES
+(@KORKRON ,0,0,0,54,0,100,1,0,0,0,0,11,@HSPELL,2,0,0,0,0,1,0,0,0,0,0,0,0, 'Kor''kron Battle Standard - On spawn Cast spell 69809'),
+(@SKYBREAKER,0,0,0,54,0,100,1,0,0,0,0,11,@ASPELL,2,0,0,0,0,1,0,0,0,0,0,0,0, 'Skybreaker Battle Standard - On spawn Cast spell 69808');
+
+-- Achievement GunShip
+UPDATE `gameobject_template` SET `data4` = 1 WHERE `entry` IN (201814,201815,201816,201817);
\ No newline at end of file
diff --git a/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.cpp b/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.cpp
index a82a2e9..9120516 100644
--- a/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.cpp
+++ b/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.cpp
@@ -69,6 +69,36 @@ enum Texts
     // Deathbound Ward
     SAY_TRAP_ACTIVATE               = 0,
 
+    // Kor'kron Primalist
+    SAY_FIRST_SQUAD_RESCUED_HORDE_0  = 0,
+
+   // Kor'kron Invoker
+     SAY_FIRST_SQUAD_RESCUED_HORDE_1  = 0,
+
+    // Kor'kron Defender
+    SAY_SECOND_SQUAD_RESCUED_HORDE_0 = 0,
+    SAY_SECOND_SQUAD_RESCUED_HORDE_1 = 1,
+    SAY_FROSTWYRM_SUMMON_0           = 2,
+    SAY_FROSTWYRM_SUMMON_1           = 3,
+
+    // Skybreaker Vindicator
+    SAY_FIRST_SQUAD_RESCUED_ALLIANCE_0  = 0,
+
+    // Skybreaker Sorcerer
+    SAY_FIRST_SQUAD_RESCUED_ALLIANCE_1  = 0,
+
+    // Skybreaker Protector
+    SAY_SECOND_SQUAD_RESCUED_ALLIANCE_0 = 0,
+    SAY_SECOND_SQUAD_RESCUED_ALLIANCE_1 = 1,
+    SAY_SECOND_SQUAD_RESCUED_ALLIANCE_2 = 2,
+
+    // Kor'kron Invoker & Skybreaker Sorcerer
+   SAY_SUMMON_BATTLE_STANDARD      = 1,
+
+    // Froswyrm
+    SAY_FROSTWYRM_LAND_H_0          = 0,
+    SAY_FROSTWYRM_LAND_A_1          = 1,
+
     // Rotting Frost Giant
     EMOTE_DEATH_PLAGUE_WARNING      = 0,
 
@@ -102,6 +132,33 @@ enum Texts
 
 enum Spells
 {
+    // Rampart of Skulls NPCs Spells
+    // Kor'kron Primalist
+    SPELL_WRATH                     = 69968,
+    SPELL_HEALING_TOUCH             = 69899,
+    SPELL_REGROWTH                  = 69882,
+    SPELL_REJUVENATION              = 69898,
+
+    SPELL_SUMMON_BATTLE_STANDART_A  = 69810,
+    SPELL_SUMMON_BATTLE_STANDART_H  = 69811,
+    SPELL_ACHIEVEMENT_SHIP          = 72959,
+
+    // Kor'kron Defender
+    SPELL_DEVASTATE                 = 69902,
+    SPELL_THUNDERCLAP               = 69965,
+    SPELL_SUNDER_ARMOR_DEF          = 57807,
+    SPELL_SPELL_REFLECT             = 69901,
+
+    // Skybreaker Vindicator
+    SPELL_AVENGERS_SHIELD           = 69927,
+    SPELL_CONCENTRATION             = 69930,
+    SPELL_HOLY_WRATH                = 69934,
+
+    // Frostwyrm
+    SPELL_FROST_BREATH              = 70116,
+    SPELL_BLIZZARD                  = 70362,
+    SPELL_FROST_CLEAVE              = 70361,
+
     // Rotting Frost Giant
     SPELL_DEATH_PLAGUE              = 72879,
     SPELL_DEATH_PLAGUE_AURA         = 72865,
@@ -258,10 +315,37 @@ enum EventTypes
     // Invisible Stalker (Float, Uninteractible, LargeAOI)
     EVENT_SOUL_MISSILE                  = 55,
 
+    // Rampart of Skulls NPCs Events
+    EVENT_WRATH                         = 56,
+    EVENT_HEAL                          = 57,
+
+    EVENT_SUNDER_ARMOR                  = 58,
+    EVENT_SPELL_REFLECT                 = 59,
+    EVENT_THUNDERCLAP                   = 60,
+    EVENT_DEVASTATE                     = 61,
+	
+    EVENT_FROST_BREATH                  = 62,
+    EVENT_BLIZZARD                      = 63,
+    EVENT_CLEAVE                        = 64,
+
+    // Skybreaker Vindicator
+    EVENT_AVENGERS_SHILED               = 65,
+    EVENT_CONCENTRATION                 = 66,
+    EVENT_HOLY_WRATH                    = 67,
+
+    // First Squad Assisted
+    EVENT_FIRST_SQUAD_ASSISTED_1        = 68,
+    EVENT_FIRST_SQUAD_ASSISTED_2        = 69,
+
+    // Second Squad Assisted
+    EVENT_SECOND_SQUAD_ASSISTED_1       = 70,
+    EVENT_SECOND_SQUAD_ASSISTED_2       = 71,
+    EVENT_SECOND_SQUAD_ASSISTED_3       = 72,
+
     // Sindragosas Ward
     EVENT_SUB_WAVE_1                    = 56,
     EVENT_SUB_WAVE_2                    = 57,
-    EVENT_UPDATE_CHECK                  = 58,
+    EVENT_UPDATE_CHECK                  = 58
 };
 
 enum DataTypesICC
@@ -287,6 +371,15 @@ enum EventIds
     EVENT_AWAKEN_WARD_4 = 22909,
 };
 
+enum Achievements
+{
+    IM_ON_A_BOAT_10    = 4536,
+    IM_ON_A_BOAT_25    = 4612
+};
+
+Position const FrostWyrmPosH   = {-435.429f, 2077.556f, 219.1148f, 2.623434f};
+Position const FrostWyrmPosA   = {-437.409f, 2349.026f, 219.1148f, 3.510935f};
+
 enum MovementPoints
 {
     POINT_LAND  = 1,
@@ -623,17 +716,30 @@ class npc_rotting_frost_giant : public CreatureScript
             {
             }
 
+            GameObject* pChest;
+			
             void Reset()
             {
                 _events.Reset();
                 _events.ScheduleEvent(EVENT_DEATH_PLAGUE, 15000);
                 _events.ScheduleEvent(EVENT_STOMP, urand(5000, 8000));
                 _events.ScheduleEvent(EVENT_ARCTIC_BREATH, urand(10000, 15000));
+                pChest = NULL;
             }
 
             void JustDied(Unit* /*killer*/)
             {
                 _events.Reset();
+                me->DespawnOrUnsummon(10000);
+                if (InstanceScript* instance = me->GetInstanceScript())
+                {
+                    instance->DoCompleteAchievement(RAID_MODE(IM_ON_A_BOAT_10,IM_ON_A_BOAT_25,IM_ON_A_BOAT_10,IM_ON_A_BOAT_25));
+                    instance->DoCastSpellOnPlayers(SPELL_ACHIEVEMENT_SHIP);
+                    if (instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+                        me->SummonGameObject(RAID_MODE(GO_CAPITAN_CHEST_H_10N, GO_CAPITAN_CHEST_H_25N, GO_CAPITAN_CHEST_H_10H, GO_CAPITAN_CHEST_H_25H), -307.584930f, 2211.561768f, 199.990861f, 0, 0, 0, 0, 0, 100000);
+                    else
+                        me->SummonGameObject(RAID_MODE(GO_CAPITAN_CHEST_A_10N, GO_CAPITAN_CHEST_A_25N, GO_CAPITAN_CHEST_A_10H, GO_CAPITAN_CHEST_A_25H), -307.584930f, 2211.561768f, 199.990861f, 0, 0, 0, 0, 0, 100000);
+                }
             }
 
             void UpdateAI(uint32 const diff)
@@ -2382,6 +2488,571 @@ class at_icc_start_sindragosa_gauntlet : public AreaTriggerScript
         }
 };
 
+/* ----------------------------------- Rampart of Skulls NPCs ----------------------------------- */
+
+/* Kor'kron Primalist  37030*/
+class npc_korkron_primalist: public CreatureScript
+{
+    public:
+        npc_korkron_primalist() : CreatureScript("npc_korkron_primalist") { }
+
+        struct npc_korkron_primalistAI : public ScriptedAI
+        {
+            npc_korkron_primalistAI(Creature* creature) : ScriptedAI(creature)
+            {
+                instance = creature->GetInstanceScript();
+                _started = false;
+            }
+
+            void Reset()
+            {
+                events.Reset();
+                events.ScheduleEvent(EVENT_WRATH, 10000); // TODO: Fix the timers
+                events.ScheduleEvent(EVENT_HEAL, 20000); // TODO: Fix the timers
+            }
+
+            void MoveInLineOfSight(Unit* who)
+            {
+                if (!instance)
+                    return;
+
+                if (instance->GetData(DATA_TEAM_IN_INSTANCE) != HORDE)
+                    return;
+
+                if (who->GetTypeId() != TYPEID_PLAYER)
+                    return;
+
+                if (instance->GetData(DATA_FIRST_SQUAD_STATE) == DONE)
+                    return;
+
+                if (!_started && me->IsWithinDistInMap(who, 25.0f))
+                {
+                    _started = true;
+                    events.ScheduleEvent(EVENT_FIRST_SQUAD_ASSISTED_1, 1000);
+                    events.ScheduleEvent(EVENT_FIRST_SQUAD_ASSISTED_2, 15000); // TODO : fix the timer
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!instance)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_FIRST_SQUAD_ASSISTED_1:
+                            Talk(SAY_FIRST_SQUAD_RESCUED_HORDE_0);
+                            break;
+                        case EVENT_FIRST_SQUAD_ASSISTED_2:
+                            if (Creature* tempUnit = me->FindNearestCreature(NPC_KORKRON_INVOKER, 120.0f, true))
+                            {
+                                tempUnit->AI()->Talk(SAY_FIRST_SQUAD_RESCUED_HORDE_1);
+                                tempUnit->AI()->Talk(SAY_SUMMON_BATTLE_STANDARD);
+                                tempUnit->CastSpell(tempUnit, SPELL_SUMMON_BATTLE_STANDART_H, true);
+                            }
+                            instance->SetData(DATA_FIRST_SQUAD_STATE, DONE);
+                            break;
+                        case EVENT_WRATH:
+                            if (UpdateVictim())
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                    DoCast(target, SPELL_WRATH);
+                            events.ScheduleEvent(EVENT_WRATH, 10000);
+                            break;
+                        case EVENT_HEAL:
+                            if (UpdateVictim())
+                            {
+                                std::list<Unit*> TargetList;
+                                Unit* finalTarget = me;
+                                Trinity::AnyFriendlyUnitInObjectRangeCheck checker(me, me, 30.0f);
+                                Trinity::UnitListSearcher<Trinity::AnyFriendlyUnitInObjectRangeCheck> searcher(me, TargetList, checker);
+                                me->VisitNearbyObject(30.0f, searcher);
+                                for (std::list<Unit*>::iterator itr = TargetList.begin(); itr != TargetList.end(); ++itr)
+                                     if ((*itr)->GetHealthPct() < finalTarget->GetHealthPct())
+                                         finalTarget = *itr;
+
+                                uint32 spellId = SPELL_HEALING_TOUCH;
+                                uint32 healthPct = uint32(finalTarget->GetHealthPct());
+                                if (healthPct > 15 && healthPct < 20)
+                                    spellId = (urand (0, 1) ? SPELL_REGROWTH : SPELL_HEALING_TOUCH);
+                                else
+                                    if (healthPct >= 20 && healthPct < 40)
+                                        spellId = SPELL_REGROWTH;
+                                else
+                                    if (healthPct > 40)
+                                        spellId = (urand(0, 1) ? SPELL_REJUVENATION : SPELL_REGROWTH);
+
+                                me->CastSpell(finalTarget, spellId, false);
+                                events.ScheduleEvent(EVENT_HEAL, 20000);
+                            }
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                bool _started;
+                EventMap events;
+                InstanceScript* instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_korkron_primalistAI(pCreature);
+        }
+};
+
+/* Kor'kron Defender  37032*/
+class npc_korkron_defender: public CreatureScript
+{
+    public:
+        npc_korkron_defender() : CreatureScript("npc_korkron_defender") { }
+
+        struct npc_korkron_defenderAI : public ScriptedAI
+        {
+            npc_korkron_defenderAI(Creature* creature) : ScriptedAI(creature)
+            {
+                instance = creature->GetInstanceScript();
+                _started2 = false;
+            }
+
+            void Reset()
+            {
+                events.Reset();
+                events.ScheduleEvent(EVENT_DEVASTATE, 10000);
+                events.ScheduleEvent(EVENT_THUNDERCLAP, 20000);
+                events.ScheduleEvent(EVENT_SPELL_REFLECT, 25000);
+                events.ScheduleEvent(EVENT_SUNDER_ARMOR, 15000);
+            }
+
+            void MoveInLineOfSight(Unit* who)
+            {
+                if (!instance)
+                    return;
+
+                if (instance->GetData(DATA_TEAM_IN_INSTANCE) != HORDE)
+                    return;
+
+                if (who->GetTypeId() != TYPEID_PLAYER)
+                    return;
+
+                if (instance->GetData(DATA_SECOND_SQUAD_STATE) == DONE)
+                    return;
+
+                if (!_started2 && me->IsWithinDistInMap(who, 25.0f))
+                {
+                    _started2 = true;
+                    instance->SetData(DATA_SECOND_SQUAD_STATE, DONE);
+                    events.ScheduleEvent(EVENT_SECOND_SQUAD_ASSISTED_1, 1000);
+                    events.ScheduleEvent(EVENT_SECOND_SQUAD_ASSISTED_2, 5000); // TODO : fix the timer
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!instance)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_SECOND_SQUAD_ASSISTED_1:
+                            Talk(SAY_SECOND_SQUAD_RESCUED_HORDE_0);
+                            break;
+                        case EVENT_SECOND_SQUAD_ASSISTED_2:
+                            Talk(SAY_SECOND_SQUAD_RESCUED_HORDE_1);
+                            Talk(SAY_FROSTWYRM_SUMMON_0);
+                            me->SummonCreature(NPC_SPIRE_FROSTWYRM, FrostWyrmPosH);
+                            break;
+                        case EVENT_DEVASTATE:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                                    DoCast(target, SPELL_DEVASTATE);
+                            }
+                            events.ScheduleEvent(EVENT_DEVASTATE, 10000);
+                            break;
+                        case EVENT_SPELL_REFLECT:
+                            if (UpdateVictim())
+                            {
+                                DoCast(me, SPELL_SPELL_REFLECT);
+                            }
+                            events.ScheduleEvent(EVENT_SPELL_REFLECT, 25000);
+                            break;
+                        case EVENT_THUNDERCLAP:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1))
+                                    DoCast(target, SPELL_THUNDERCLAP);
+                            }
+                            events.ScheduleEvent(EVENT_THUNDERCLAP, 20000);
+                            break;
+                        case EVENT_SUNDER_ARMOR:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1))
+                                    DoCast(target, SPELL_SUNDER_ARMOR_DEF);
+                            }
+                            events.ScheduleEvent(EVENT_SUNDER_ARMOR, 15000);
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                EventMap events;
+                bool _started2;
+                InstanceScript* instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_korkron_defenderAI(pCreature);
+        }
+};
+
+/* Skybreaker Vindicator  37003*/
+class npc_skybreaker_vindicator: public CreatureScript
+{
+    public:
+        npc_skybreaker_vindicator() : CreatureScript("npc_skybreaker_vindicator") { }
+
+        struct npc_skybreaker_vindicatorAI : public ScriptedAI
+        {
+            npc_skybreaker_vindicatorAI(Creature* creature) : ScriptedAI(creature)
+            {
+                instance = creature->GetInstanceScript();
+                _started = false;
+            }
+
+            void Reset()
+            {
+                events.Reset();
+                events.ScheduleEvent(EVENT_AVENGERS_SHILED, 10000); // TODO: Fix the timers
+                events.ScheduleEvent(EVENT_CONCENTRATION, 20000); // TODO: Fix the timers
+                events.ScheduleEvent(EVENT_HOLY_WRATH, 20000); // TODO: Fix the timers
+            }
+
+            void MoveInLineOfSight(Unit* who)
+            {
+                if (!instance)
+                    return;
+
+                if (instance->GetData(DATA_TEAM_IN_INSTANCE) != ALLIANCE)
+                    return;
+
+                if (who->GetTypeId() != TYPEID_PLAYER)
+                    return;
+
+                if (instance->GetData(DATA_FIRST_SQUAD_STATE) == DONE)
+                    return;
+
+                if (!_started && me->IsWithinDistInMap(who, 25.0f))
+                {
+                    _started = true;
+                    events.ScheduleEvent(EVENT_FIRST_SQUAD_ASSISTED_1, 1000);
+                    events.ScheduleEvent(EVENT_FIRST_SQUAD_ASSISTED_2, 15000); // TODO : fix the timer
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!instance)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_FIRST_SQUAD_ASSISTED_1:
+                            Talk(SAY_FIRST_SQUAD_RESCUED_ALLIANCE_0);
+                            break;
+                        case EVENT_FIRST_SQUAD_ASSISTED_2:
+                            if (Creature* tempUnit = me->FindNearestCreature(NPC_SKYBREAKER_SORCERER, 120.0f, true))
+                            {
+                                tempUnit->AI()->Talk(SAY_FIRST_SQUAD_RESCUED_ALLIANCE_1);
+                                tempUnit->AI()->Talk(SAY_SUMMON_BATTLE_STANDARD);
+                                tempUnit->CastSpell(tempUnit, SPELL_SUMMON_BATTLE_STANDART_A, true);
+                            }
+                            instance->SetData(DATA_FIRST_SQUAD_STATE, DONE);
+                            break;
+                        case EVENT_AVENGERS_SHILED:
+                            if (UpdateVictim())
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                    DoCast(target, SPELL_WRATH);
+                            events.ScheduleEvent(EVENT_AVENGERS_SHILED, 10000);
+                            break;
+                        case EVENT_CONCENTRATION:
+                            if (UpdateVictim())
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                    DoCast(target, SPELL_CONCENTRATION);
+                            events.ScheduleEvent(EVENT_CONCENTRATION, 20000);
+                            break;
+                        case EVENT_HOLY_WRATH:
+                            if (UpdateVictim())
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                    DoCast(target, SPELL_HOLY_WRATH);
+                            events.ScheduleEvent(EVENT_HOLY_WRATH, 15000);
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                bool _started;
+                EventMap events;
+                InstanceScript* instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_skybreaker_vindicatorAI(pCreature);
+        }
+};
+
+/* Skybreaker Protector  36998*/
+class npc_skybreaker_protector: public CreatureScript
+{
+    public:
+        npc_skybreaker_protector() : CreatureScript("npc_skybreaker_protector") { }
+
+        struct npc_skybreaker_protectorAI : public ScriptedAI
+        {
+            npc_skybreaker_protectorAI(Creature* creature) : ScriptedAI(creature)
+            {
+                instance = creature->GetInstanceScript();
+                _started2 = false;
+            }
+
+            void Reset()
+            {
+                events.Reset();
+                events.ScheduleEvent(EVENT_DEVASTATE, 10000);
+                events.ScheduleEvent(EVENT_THUNDERCLAP, 20000);
+                events.ScheduleEvent(EVENT_SPELL_REFLECT, 25000);
+                events.ScheduleEvent(EVENT_SUNDER_ARMOR, 15000);
+            }
+
+            void MoveInLineOfSight(Unit* who)
+            {
+                if (!instance)
+                    return;
+
+                if (instance->GetData(DATA_TEAM_IN_INSTANCE) != ALLIANCE)
+                    return;
+
+                if (who->GetTypeId() != TYPEID_PLAYER)
+                    return;
+
+                if (instance->GetData(DATA_SECOND_SQUAD_STATE) == DONE)
+                    return;
+
+                if (!_started2 && me->IsWithinDistInMap(who, 25.0f))
+                {
+                    _started2 = true;
+                    instance->SetData(DATA_SECOND_SQUAD_STATE, DONE);
+                    events.ScheduleEvent(EVENT_SECOND_SQUAD_ASSISTED_1, 1000);
+                    events.ScheduleEvent(EVENT_SECOND_SQUAD_ASSISTED_2, 11000); // TODO : fix the timer
+                    events.ScheduleEvent(EVENT_SECOND_SQUAD_ASSISTED_3, 17000); // TODO : fix the timer
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!instance)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_SECOND_SQUAD_ASSISTED_1:
+                            Talk(SAY_SECOND_SQUAD_RESCUED_ALLIANCE_0);
+                            break;
+                        case EVENT_SECOND_SQUAD_ASSISTED_2:
+                            Talk(SAY_SECOND_SQUAD_RESCUED_ALLIANCE_1);
+                            break;
+                        case EVENT_SECOND_SQUAD_ASSISTED_3:
+                            Talk(SAY_SECOND_SQUAD_RESCUED_ALLIANCE_2);
+                            Talk(SAY_FROSTWYRM_SUMMON_1);
+                            me->SummonCreature(NPC_SPIRE_FROSTWYRM, FrostWyrmPosA);
+                            break;
+                        case EVENT_DEVASTATE:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                                    DoCast(target, SPELL_DEVASTATE);
+                            }
+                            events.ScheduleEvent(EVENT_DEVASTATE, 10000);
+                            break;
+                        case EVENT_SPELL_REFLECT:
+                            if (UpdateVictim())
+                            {
+                                DoCast(me, SPELL_SPELL_REFLECT);
+                            }
+                            events.ScheduleEvent(EVENT_SPELL_REFLECT, 25000);
+                            break;
+                        case EVENT_THUNDERCLAP:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1))
+                                    DoCast(target, SPELL_THUNDERCLAP);
+                            }
+                            events.ScheduleEvent(EVENT_THUNDERCLAP, 20000);
+                            break;
+                        case EVENT_SUNDER_ARMOR:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1))
+                                    DoCast(target, SPELL_SUNDER_ARMOR_DEF);
+                            }
+                            events.ScheduleEvent(EVENT_SUNDER_ARMOR, 15000);
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                bool _started2;
+                EventMap events;
+                InstanceScript* instance;
+        };
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_skybreaker_protectorAI(pCreature);
+        }
+};
+
+
+/* Spire Frostwyrm  37230*/
+class npc_icc_spire_frostwyrm: public CreatureScript
+{
+    public:
+        npc_icc_spire_frostwyrm() : CreatureScript("npc_icc_spire_frostwyrm") { }
+
+        struct npc_icc_spire_frostwyrmAI : public ScriptedAI
+        {
+            npc_icc_spire_frostwyrmAI(Creature* creature) : ScriptedAI(creature)
+            {
+                instance = creature->GetInstanceScript();
+            }
+
+            void Reset()
+            {
+                landed = false;
+                events.Reset();
+                me->SetCanFly(true);
+                me->SetReactState(REACT_AGGRESSIVE);
+                me->AddUnitMovementFlag(MOVEMENTFLAG_DISABLE_GRAVITY);
+                me->SetByteFlag(UNIT_FIELD_BYTES_1, 3, UNIT_BYTE1_FLAG_ALWAYS_STAND | UNIT_BYTE1_FLAG_HOVER);
+                events.ScheduleEvent(EVENT_FROST_BREATH, 20000);
+                events.ScheduleEvent(EVENT_BLIZZARD, 25000);
+                events.ScheduleEvent(EVENT_CLEAVE, 10000);
+            }
+
+            void MoveInLineOfSight(Unit* who)
+            {
+                if (!instance)
+                    return;
+
+                if (who->GetTypeId() != TYPEID_PLAYER)
+                    return;
+
+                if (!who->isTargetableForAttack())
+                    return;
+
+                if (!landed && me->IsWithinDistInMap(who, 45.0f))
+                {
+                    if (instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+                        Talk(SAY_FROSTWYRM_LAND_H_0);
+                    else
+                        Talk(SAY_FROSTWYRM_LAND_A_1);
+                    landed = true;
+                    me->SetCanFly(false);
+                    me->RemoveUnitMovementFlag(MOVEMENTFLAG_DISABLE_GRAVITY);
+                    me->SetInCombatWith(who);
+                    me->AddThreat(who, 1.0f);
+                    me->GetMotionMaster()->MoveChase(who);
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!UpdateVictim())
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_FROST_BREATH:
+                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                DoCast(target, SPELL_FROST_BREATH);
+                            events.ScheduleEvent(EVENT_FROST_BREATH, 20000);
+                            break;
+                        case EVENT_BLIZZARD:
+                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                DoCast(target, SPELL_BLIZZARD);
+                            events.ScheduleEvent(EVENT_BLIZZARD, 25000);
+                            break;
+                        case EVENT_CLEAVE:
+                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                DoCast(target, SPELL_FROST_CLEAVE);
+                            events.ScheduleEvent(EVENT_CLEAVE, 10000);
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                bool landed;
+                EventMap events;
+                InstanceScript* instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_icc_spire_frostwyrmAI(pCreature);
+        }
+};
+
 void AddSC_icecrown_citadel()
 {
     new npc_highlord_tirion_fordring_lh();
@@ -2411,4 +3082,9 @@ void AddSC_icecrown_citadel()
     new at_icc_start_frostwing_gauntlet();
     new npc_sindragosas_ward();
     new at_icc_start_sindragosa_gauntlet();
+    new npc_korkron_primalist();
+    new npc_korkron_defender();
+    new npc_skybreaker_vindicator();
+    new npc_skybreaker_protector();
+    new npc_icc_spire_frostwyrm();
 }
diff --git a/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.h b/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.h
index 378d461..03cadb5 100644
--- a/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.h
+++ b/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.h
@@ -110,12 +110,16 @@ enum DataTypes
     DATA_CAPTAIN_ARNATH             = 32,
     DATA_CAPTAIN_BRANDON            = 33,
     DATA_CAPTAIN_GRONDEL            = 34,
+    DATA_CAPTAIN_GRONDEL            = 34,
     DATA_CAPTAIN_RUPERT             = 35,
     DATA_VALITHRIA_TRIGGER          = 36,
     DATA_VALITHRIA_LICH_KING        = 37,
     DATA_HIGHLORD_TIRION_FORDRING   = 38,
     DATA_ARTHAS_PLATFORM            = 39,
     DATA_TERENAS_MENETHIL           = 40,
+    DATA_FIRST_SQUAD_STATE          = 40,
+    DATA_SECOND_SQUAD_STATE         = 41,
+    DATA_SPIRE_FROSTWYRM_STATE      = 42,
 };
 
 enum CreaturesIds
@@ -168,6 +172,11 @@ enum CreaturesIds
     NPC_EMPOWERED_ADHERENT                      = 38136,
     NPC_REANIMATED_ADHERENT                     = 38010,
     NPC_VENGEFUL_SHADE                          = 38222,
+	
+    // Ramparts
+    NPC_SPIRE_FROSTWYRM                         = 37230,
+    NPC_KORKRON_INVOKER                         = 37033,
+    NPC_SKYBREAKER_SORCERER                     = 37026,
 
     // Deathbringer Saurfang
     NPC_DEATHBRINGER_SAURFANG                   = 37813,
@@ -310,6 +319,16 @@ enum GameObjectsIds
     // Lady Deathwhisper
     GO_ORATORY_OF_THE_DAMNED_ENTRANCE       = 201563,
     GO_LADY_DEATHWHISPER_ELEVATOR           = 202220,
+	
+    // Gunship Battle
+    GO_CAPITAN_CHEST_A_10N                  = 201872,
+    GO_CAPITAN_CHEST_A_10H                  = 201874,
+    GO_CAPITAN_CHEST_A_25N                  = 201873,    
+	GO_CAPITAN_CHEST_A_25H                  = 201875,
+    GO_CAPITAN_CHEST_H_10N                  = 202177,
+    GO_CAPITAN_CHEST_H_10H                  = 202180,
+    GO_CAPITAN_CHEST_H_25N                  = 202178,
+    GO_CAPITAN_CHEST_H_25H                  = 202179,
 
     // Deathbringer Saurfang
     GO_SAURFANG_S_DOOR                      = 201825,
diff --git a/src/server/scripts/Northrend/IcecrownCitadel/instance_icecrown_citadel.cpp b/src/server/scripts/Northrend/IcecrownCitadel/instance_icecrown_citadel.cpp
index e00f027..a4df0cf 100644
--- a/src/server/scripts/Northrend/IcecrownCitadel/instance_icecrown_citadel.cpp
+++ b/src/server/scripts/Northrend/IcecrownCitadel/instance_icecrown_citadel.cpp
@@ -114,6 +114,7 @@ class instance_icecrown_citadel : public InstanceMapScript
                 TeamInInstance = 0;
                 HeroicAttempts = MaxHeroicAttempts;
                 LadyDeathwisperElevatorGUID = 0;
+                RottingFrostGiantGUID = 0;
                 DeathbringerSaurfangGUID = 0;
                 DeathbringerSaurfangDoorGUID = 0;
                 DeathbringerSaurfangEventGUID = 0;
@@ -226,6 +227,10 @@ class instance_icecrown_citadel : public InstanceMapScript
                         if (TeamInInstance == ALLIANCE)
                             creature->UpdateEntry(NPC_KING_VARIAN_WRYNN, ALLIANCE);
                         break;
+                    case NPC_ROTTING_FROST_GIANT_10:
+                    case NPC_ROTTING_FROST_GIANT_25:
+                        RottingFrostGiantGUID = creature->GetGUID();
+                        break;
                     case NPC_DEATHBRINGER_SAURFANG:
                         DeathbringerSaurfangGUID = creature->GetGUID();
                         break;
@@ -461,6 +466,18 @@ class instance_icecrown_citadel : public InstanceMapScript
                             go->SetGoState(GO_STATE_READY);
                         }
                         break;
+                    case GO_CAPITAN_CHEST_A_10N:
+                    case GO_CAPITAN_CHEST_A_10H:
+                    case GO_CAPITAN_CHEST_A_25N:
+                    case GO_CAPITAN_CHEST_A_25H:
+                    case GO_CAPITAN_CHEST_H_10N:
+                    case GO_CAPITAN_CHEST_H_10H:
+                    case GO_CAPITAN_CHEST_H_25N:
+                    case GO_CAPITAN_CHEST_H_25H:
+                        if (Creature* rotting = instance->GetCreature(RottingFrostGiantGUID))
+                            go->SetLootRecipient(rotting->GetLootRecipient());
+                        go->RemoveFlag(GAMEOBJECT_FLAGS, GO_FLAG_LOCKED | GO_FLAG_NOT_SELECTABLE | GO_FLAG_NODESPAWN);
+                        break;
                     case GO_SAURFANG_S_DOOR:
                         DeathbringerSaurfangDoorGUID = go->GetGUID();
                         AddDoor(go, true);
@@ -1303,6 +1320,7 @@ class instance_icecrown_citadel : public InstanceMapScript
         protected:
             EventMap Events;
             uint64 LadyDeathwisperElevatorGUID;
+            uint64 RottingFrostGiantGUID;
             uint64 DeathbringerSaurfangGUID;
             uint64 DeathbringerSaurfangDoorGUID;
             uint64 DeathbringerSaurfangEventGUID;   // Muradin Bronzebeard or High Overlord Saurfang
-- 
1.7.10
